package de.aidger.view.tabs;

import static de.aidger.utils.Translation._;

import java.util.List;
import java.util.Vector;

import javax.swing.JPanel;

import de.aidger.model.budgets.BudgetFilter;
import de.aidger.model.budgets.BudgetFilter.Comparison;
import de.aidger.model.models.Course;
import de.aidger.view.reports.BalanceFilterPanel;
import de.unistuttgart.iste.se.adohive.exceptions.AdoHiveException;
import de.unistuttgart.iste.se.adohive.model.ICourse;

/**
 * This class displays a table of all the course budgets.
 * 
 * @author aidGer Team
 */
public class BudgetViewerTab extends ReportTab {

    /**
     * The budget filter of this budget check.
     */
    private BudgetFilter budgetFilter = null;

    /**
     * The filter panels of this budget check.
     */
    private Vector<BalanceFilterPanel> filterPanels = null;

    /**
     * Initializes a new BudgetViewerTab.
     */
    public BudgetViewerTab() {
        initComponents();
        budgetFilter = new BudgetFilter();
        filterPanels = new Vector<BalanceFilterPanel>();
        budgetFilterText.setVisible(false);
        String[] filterNames = { _("Lecturer"), _("Available budgets"),
                _("Booked budgets"), _("Total budgets") };
        for (int i = 0; i < filterNames.length; i++) {
            filterNameComboBox.addItem(filterNames[i]);
        }
    }

    /**
     * Removes the given panel from the filter panel.
     * 
     * @param panel
     *            The panel to remove
     */
    @Override
    public void removeFilterPanel(JPanel panel) {
        filterContentPanel.remove(panel);
        filterContentPanel.setVisible(false);
        filterContentPanel.setVisible(true);
    }

    /**
     * Removes the specified filter from the filters list.
     * 
     * @param type
     *            The type of filter.
     * @param value
     *            The value of the filter.
     */
    @Override
    public void removeFilter(String name, String value) {
        if (name.equals(_("Lecturer"))) {
            if (budgetFilter.getLecturers().contains(value)) {
                budgetFilter.removeLecturer(value);
            }
        } else {
            for (BalanceFilterPanel filterPanel : filterPanels) {
                if (filterPanel.getName().equals(name)) {
                    filterPanels.remove(filterPanel);
                    break;
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        generateButton = new javax.swing.JButton();
        exportButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        filtersPanel = new javax.swing.JPanel();
        filterCreationPanel = new javax.swing.JPanel();
        filtersLabel = new javax.swing.JLabel();
        filterNameComboBox = new javax.swing.JComboBox();
        filterComboBox = new javax.swing.JComboBox();
        budgetFilterText = new javax.swing.JTextField();
        addFilterButton = new javax.swing.JButton();
        filterContentPanel = new javax.swing.JPanel();
        contentPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        generateButton.setText(_("Generate"));
        generateButton.setFocusable(false);
        generateButton
            .setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        generateButton
            .setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(generateButton);

        exportButton.setText(_("Export"));
        exportButton.setFocusable(false);
        exportButton
            .setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        exportButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(exportButton);

        add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        jPanel1.setLayout(new java.awt.BorderLayout());

        filtersPanel.setLayout(new java.awt.BorderLayout());

        filterCreationPanel.setLayout(new java.awt.FlowLayout(
            java.awt.FlowLayout.LEFT));

        filtersLabel.setText(_("Filters") + ":");
        filterCreationPanel.add(filtersLabel);

        filterNameComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                filterNameComboBoxItemStateChanged(evt);
            }
        });
        filterCreationPanel.add(filterNameComboBox);

        filterCreationPanel.add(filterComboBox);

        budgetFilterText.setMinimumSize(new java.awt.Dimension(40, 25));
        budgetFilterText.setPreferredSize(new java.awt.Dimension(40, 25));
        filterCreationPanel.add(budgetFilterText);

        addFilterButton.setText("+");
        addFilterButton.setFocusable(false);
        addFilterButton
            .setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addFilterButton
            .setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addFilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFilterButtonActionPerformed(evt);
            }
        });
        filterCreationPanel.add(addFilterButton);

        filtersPanel.add(filterCreationPanel, java.awt.BorderLayout.PAGE_START);

        filterContentPanel.setLayout(new java.awt.GridLayout(0, 1));
        filtersPanel.add(filterContentPanel, java.awt.BorderLayout.CENTER);

        jPanel1.add(filtersPanel, java.awt.BorderLayout.PAGE_START);

        contentPanel.setLayout(new javax.swing.BoxLayout(contentPanel,
            javax.swing.BoxLayout.LINE_AXIS));
        jPanel1.add(contentPanel, java.awt.BorderLayout.CENTER);

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void filterNameComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_filterNameComboBoxItemStateChanged
        switch (filterNameComboBox.getSelectedIndex()) {
        /*
         * Clear the filter combo box and add all entries of this filter type.
         */
        case 0:
            filterComboBox.removeAllItems();
            budgetFilterText.setVisible(false);
            budgetFilterText.setText("");
            List<ICourse> courses = null;
            try {
                courses = (new Course()).getAll();
            } catch (AdoHiveException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            Vector courseLecturers = new Vector();
            for (ICourse course : courses) {
                if (!courseLecturers.contains(course.getLecturer())) {
                    courseLecturers.add(course.getLecturer());
                    filterComboBox.addItem(course.getLecturer());
                }
            }
            break;
        case 1:
        case 2:
        case 3:
            filterComboBox.removeAllItems();
            filterComboBox.addItem(Comparison.LESS);
            filterComboBox.addItem(Comparison.LESSEQUAL);
            filterComboBox.addItem(Comparison.EQUAL);
            filterComboBox.addItem(Comparison.GREATEREQUAL);
            filterComboBox.addItem(Comparison.GREATER);
            budgetFilterText.setText("");
            budgetFilterText.setVisible(true);
            break;
        }
    }//GEN-LAST:event_filterNameComboBoxItemStateChanged

    private void addFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFilterButtonActionPerformed
        switch (filterNameComboBox.getSelectedIndex()) {
        /*
         * If the filter doesn't exist, add it, repaint the combo box and set
         * the selected index of the name combo box to the type of filter added.
         */
        case 0:
            if (!budgetFilter.getLecturers().contains(
                filterComboBox.getSelectedItem().toString())
                    && filterComboBox.getItemCount() > 0) {
                budgetFilter.addLecturer((String) filterComboBox
                    .getSelectedItem());
                filterContentPanel.add(new BalanceFilterPanel(
                    filterNameComboBox.getItemAt(0).toString(),
                    (String) filterComboBox.getSelectedItem(), this));
            }
            break;
        case 1:
            if (!budgetFilterText.getText().equals("")) {
                budgetFilter.setAvailableBudget(Double
                    .parseDouble(budgetFilterText.getText()));
                budgetFilter.setAvailableComparison((Comparison) filterComboBox
                    .getSelectedItem());
                int i = 0;
                boolean filterPanelFound = false;
                for (BalanceFilterPanel filterPanel : filterPanels) {
                    if (filterPanel.getName().equals(
                        filterNameComboBox.getSelectedItem())) {
                        filterPanelFound = true;
                        break;
                    }
                    i++;
                }
                if (i == filterPanels.size() || !filterPanelFound) {
                    BalanceFilterPanel filterPanel = new BalanceFilterPanel(
                        filterNameComboBox.getItemAt(1).toString(),
                        filterComboBox.getSelectedItem().toString(), this);
                    filterPanel.setBudgetLabel(budgetFilterText.getText());
                    filterPanels.add(filterPanel);
                    filterContentPanel.add(filterPanel);
                } else {
                    BalanceFilterPanel filterPanel = filterPanels.get(i);
                    filterPanel.setFilterLabel(filterComboBox.getSelectedItem()
                        .toString());
                    filterPanel.setBudgetLabel(budgetFilterText.getText());
                }
            }
            break;
        case 2:
            if (!budgetFilterText.getText().equals("")) {
                budgetFilter.setAvailableBudget(Double
                    .parseDouble(budgetFilterText.getText()));
                budgetFilter.setAvailableComparison((Comparison) filterComboBox
                    .getSelectedItem());
                int i = 0;
                boolean filterPanelFound = false;
                for (BalanceFilterPanel filterPanel : filterPanels) {
                    if (filterPanel.getName().equals(
                        filterNameComboBox.getSelectedItem())) {
                        filterPanelFound = true;
                        break;
                    }
                    i++;
                }
                if (i == filterPanels.size() || !filterPanelFound) {
                    BalanceFilterPanel filterPanel = new BalanceFilterPanel(
                        filterNameComboBox.getItemAt(2).toString(),
                        filterComboBox.getSelectedItem().toString(), this);
                    filterPanel.setBudgetLabel(budgetFilterText.getText());
                    filterPanels.add(filterPanel);
                    filterContentPanel.add(filterPanel);
                } else {
                    BalanceFilterPanel filterPanel = filterPanels.get(i);
                    filterPanel.setFilterLabel(filterComboBox.getSelectedItem()
                        .toString());
                    filterPanel.setBudgetLabel(budgetFilterText.getText());
                }
            }
            break;
        case 3:
            if (!budgetFilterText.getText().equals("")) {
                budgetFilter.setAvailableBudget(Double
                    .parseDouble(budgetFilterText.getText()));
                budgetFilter.setAvailableComparison((Comparison) filterComboBox
                    .getSelectedItem());
                int i = 0;
                boolean filterPanelFound = false;
                for (BalanceFilterPanel filterPanel : filterPanels) {
                    if (filterPanel.getName().equals(
                        filterNameComboBox.getSelectedItem())) {
                        filterPanelFound = true;
                        break;
                    }
                    i++;
                }
                if (i == filterPanels.size() || !filterPanelFound) {
                    BalanceFilterPanel filterPanel = new BalanceFilterPanel(
                        filterNameComboBox.getItemAt(3).toString(),
                        filterComboBox.getSelectedItem().toString(), this);
                    filterPanel.setBudgetLabel(budgetFilterText.getText());
                    filterPanels.add(filterPanel);
                    filterContentPanel.add(filterPanel);
                } else {
                    BalanceFilterPanel filterPanel = filterPanels.get(i);
                    filterPanel.setFilterLabel(filterComboBox.getSelectedItem()
                        .toString());
                    filterPanel.setBudgetLabel(budgetFilterText.getText());
                }
            }
            break;
        }
        filterContentPanel.setVisible(false);
        filterContentPanel.setVisible(true);
    }//GEN-LAST:event_addFilterButtonActionPerformed

    /*
     * (non-Javadoc)
     * 
     * @see de.aidger.view.tabs.Tab#getTabName()
     */
    @Override
    public String getTabName() {
        return _("Budget viewing");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFilterButton;
    private javax.swing.JTextField budgetFilterText;
    private javax.swing.JPanel contentPanel;
    private javax.swing.JButton exportButton;
    private javax.swing.JComboBox filterComboBox;
    private javax.swing.JPanel filterContentPanel;
    private javax.swing.JPanel filterCreationPanel;
    private javax.swing.JComboBox filterNameComboBox;
    private javax.swing.JLabel filtersLabel;
    private javax.swing.JPanel filtersPanel;
    private javax.swing.JButton generateButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

}
