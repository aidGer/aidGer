#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# testdata-gen.py
#
# Generates random test data for aidGer.
# Change global variables at the start of the script to specify what data to generate.
#
# Usage:
#       python testdata-gen.py > testdata.sql


# Number of assistants
assistants = 500

# Number of employments
employments = 2000

# Number of activities
activities = 1000

# Hourly wages for u, g and b qualifications
wage = [ 8.37, 10.52, 13.24 ]

firstnames = [ 'Anna', 'Boris', 'Charly', 'Dennis', 'Eva', 'Franz', 'Georg', 'Hans', 'Ivan', 'Jessica', 'Klaus', 'Lena', 'Manfred', 'Norbert', 'Olaf', 'Peter', 'Roberta', 'Simone', 'Thomas', 'Ulla', 'Valentin', 'Werner', 'Xaver', 'Maximilian', 'Max', 'Maxi', 'Alexander', 'Leon', 'Paul', 'Luca', 'Elias', 'Felix', 'Lukas', 'Lucas', 'Jonas', 'David', 'Finn', 'Fynn', 'Tim', 'Ben', 'Benjamin', 'Joel', 'Ali', 'Jannis', 'Tyler', 'Adrian', 'Daniel', 'Philipp', 'Philip', 'Phillip', 'Filip', 'Fred', 'Henry', 'Jan', 'Jerome', 'Joshua', 'Lars', 'Manuel', 'Marc', 'Marlon', 'Maurice' ]
lastnames = [ 'Maier', 'Mayer', 'Meier', 'Mayr', 'Schäfer', 'Schmidt', 'Schmid', 'Schneider', 'Müller', 'Fischer', 'Weber', 'Schulz', 'Wagner', 'Becker', 'Hoffmann', 'Gruber', 'Huber', 'Bauer', 'Pichler', 'Steiner', 'Moser', 'Hofer', 'Leitner', 'Berger', 'Fuchs', 'Eder', 'Winkler', 'Schwarz', 'Reiter', 'Wimmer', 'Egger', 'Brunner', 'Lang', 'Baumgartner', 'Auer', 'Binder', 'Lechner', 'Wolf', 'Wallner', 'Aigner', 'Ebner', 'Koller', 'Lehner', 'Haas', 'Schuster', 'Mack', 'Heubach', 'Gildein', 'Pirrung', 'Buchgraber', 'Kulesz' ]
courses = [ 'Einführung in die Informatik', 'Einführung in die Softwaretechnik', 'Mathematik für Informatiker und Softwaretechniker', 'Softwareengineering für Softwaretechniker', 'Software Praktikum', 'Software Projekt A', 'Software Projekt B', 'Technische Informatik', 'Theoretische Informatik', 'Programmentwicklung', 'Java für Dummies' ]
semesters = [ 'SS08', 'WS0809', 'SS09', 'WS0910', 'SS10', 'WS1011' ]
qualifications = [ 'u', 'g', 'b' ]
categories = [ 'Forschung', 'Studiengebühren', 'Vorlesungen' ]
amount_of_hours = [ '2Ü', '3Ü', '4Ü', '6Ü' ]
contract_types = [ 'newContract', 'increase', 'decrease', 'rebooking' ]
cost_units = [['A', '11111111'], ['B', '22222222'], ['C', '33333333']]

remark = 'This data was automatically produced by testdata-gen.py'

import random
from datetime import date, timedelta

####################################################################################################
# Main Function
####################################################################################################

contract_id = 0

def main():
    '''The main function of this script. Executes all functions to generate a valid sql script containing the specified amounts of data.'''

    print('''
--
-- This file was generated by testdata-gen.py
--
    ''')
    assistants = generate_assistants()
    fcs = generate_fcs()
    wages = generate_wages()
    courses = generate_courses(fcs)
    activities = generate_activities(assistants, courses)
    employments = generate_employments(assistants, courses)

    generate_assistants_sql(assistants)
    generate_fcs_sql(fcs)
    generate_wages_sql(wages)
    generate_courses_sql(courses)
    generate_activities_sql(activities)
    generate_employments_sql(employments)

    return 0

####################################################################################################
# Helper functions
####################################################################################################

def generate_name(list = []):
    '''Generates a name and check that it is not in the specified list.'''
    global firstnames, lastnames

    list = set(list)
    maxnames = len(firstnames) ** len(lastnames)
    name = ''
    i = 0
    while True:
        name = random.choice(firstnames) + ' ' + random.choice(lastnames)
        if len(list) == 0 or name not in list:
            break

        i += 1
        if i >= maxnames:
            raise Exception("Couldn't generate a name because all combinations are exhausted. Add more names to the script")
    return name

def generate_studimail(name):
    '''Generates a valid studimail address from the given name.'''
    if len(name) == 0:
        return 'anon@ymous.net'

    firstname, lastname = name.lower().split(' ', 1)
    return lastname[:6] + firstname[0] + firstname[-1] + '@studimail.informatik.uni-stuttgart.de'

def get_years():
    '''Return a list of years taken from the semesters.'''
    global semesters
    years = []
    for i in semesters:
        if i[:2] == 'SS':
            years.append('20' + i[2:])
        else:
            if '20' + i[2:4] not in years:
                years.append('20' + i[2:4])
            if '20' + i[4:6] not in years:
                years.append('20' + i[4:6])
    return years

####################################################################################################
# Data generation functions
####################################################################################################

def generate_assistants():
    '''Generates a list of assistants containing all informations needed to add an assistant to the database.'''
    global assistants, qualifications
    assistant_list = []
    name_list = []
    for i in range(0, assistants):
        name = generate_name(name_list)
        name_list.append(name)
        email = generate_studimail(name)
        quali = random.choice(qualifications)

        assistant_list.append({ 'id' : i + 1, 'name' : name, 'email' : email, 'qualification' : quali })
    return assistant_list

def generate_fcs():
    '''Generates a list of financial categories containing all informations needed to add a financial category to the database.'''
    global categories

    years = get_years()
    fcs = []
    id = 0
    for y in years:
        for c in categories:
            cost = int(random.random() * 10000)
            costunit = int(random.random() * 100000000)
            id += 1

            fcs.append({'id' : id, 'name' : c, 'year' : y, 'costs' : cost, 'costunit' : costunit })
    return fcs

def generate_wages():
    '''Generates a list of financial categories containing all informations needed to add a hourly wage to the database.'''
    global wage, qualifications

    years = get_years()
    wages = []
    for i in range(0, len(wage)):
        wages.append({'qualification' : qualifications[i], 'wage' : wage[i], 'year' : years[0], 'month' : '01'})
    return wages

def generate_courses(fcs):
    '''Generates a list of courses containing all informations needed to add a course to the database.'''
    global semesters, courses, amount_of_hours

    course_list = []
    id = 0
    for s in semesters:
        year = '20' + s[2:4]
        fc_list = []
        for f in fcs:
            if f['year'] == year:
                fc_list.append(f)

        for n in courses:
            hks = random.random() * 1000
            amount = random.choice(amount_of_hours)
            groups = random.randrange(1, 10, 1)
            id += 1

            course_list.append({ 'id' : id, 'name' : n, 'semester' : s, 'lecturer' : generate_name(), 'hks' : hks, 'amount' : amount, 'groups' : groups, 'tutor' : generate_name(), 'fc' : random.choice(fc_list)['id'] })
    return course_list

def generate_activities(assis, courses):
    '''Generates a list of activities containing all informations needed to add an activity to the database.'''
    global activities

    years = get_years()
    delta = timedelta(days=1)
    dates = [date(int(years[0]), 1, 1)]
    while dates[-1].year <= int(years[-1]):
        next_day = dates[-1] + delta
        dates.append(next_day)

    act_list = []
    for i in range(0, activities):
        a = random.randrange(-100, len(assis), 1)
        c = random.randrange(-100, len(courses), 1)

        assi = { 'id' : None }; course = { 'id' : None }
        if a >= 0 and a <= len(assis) - 1:
            assi = assis[a]
        if c >= 0 and c <= len(courses) - 1:
            course = courses[c]

        #TODO: Add 'type'
        #TODO: Add 'doctype'
        act_list.append({ 'id' : i + 1, 'assi' : assi['id'], 'course' : course['id'], 'type' : None, 'date' : random.choice(dates), 'sender' : generate_name(), 'doctype' : None })

    return act_list

def generate_employments(assis, courses):
    ''' Generates a list of employments containing all informations needed to add an employment to the database.'''
    global employments, cost_units

    years = get_years()

    emp_list = []
    id = 0
    for i in range(0, employments):
        assi = random.choice(assis)
        course = random.choice(courses)

        months = random.randrange(1, 10, 1)
        y = int('20' + course['semester'][2:4])
        m = random.randrange(4, 9, 1) if course['semester'][:2] == 'SS' else random.choice([10, 11, 12, 1, 2, 3])
        month = date(y, m, 1)
        cost_unit = random.choice(cost_units)

        contract = generate_contract(assi, month, months)

        for j in range(0, months):
            hours = random.randrange(10, 40, 1)
            id += 1
            emp_list.append({ 'id' : id, 'assi' : assi['id'], 'course' : course['id'], 'month' : month.month, 'year' : month.year, 'hours' : hours, 'fonds' : cost_unit[0], 'costunit' : cost_unit[1], 'qualification' : assi['qualification'], 'contract' : None, 'cid' : contract['id'] })

            if j == 0:
                emp_list[-1]['contract'] = contract

            # Get the next month
            y = month.year if month.month < 12 else month.year + 1
            m = month.month + 1 if month.month < 12 else 1
            month = date(y, m, 1)

    return emp_list

def generate_contract(assi, start, amount):
    '''Generates a single contract for a specific employment'''
    global contract_types, contract_id

    type = random.choice(contract_types)
    delegation = type != 'newContract'

    end = start
    for i in range(0, amount):
            y = end.year if end.month < 12 else end.year + 1
            m = end.month + 1 if end.month < 12 else 1
            end = date(y, m, 1)
    completion = start + timedelta(days=random.randrange(1, 10, 1))
    confirmation = start + timedelta(days=random.randrange(10, 20, 1))

    contract_id += 1
    return { 'id' : contract_id, 'assi' : assi['id'], 'type' : type, 'delegation' : delegation, 'start' : start, 'end' : end, 'completion' : completion, 'confirmation' : confirmation }

####################################################################################################
# SQL generation functions
####################################################################################################

def generate_assistants_sql(assis):
    sql = """INSERT INTO "Hilfskraft" (ID, Vorname, Nachname, Email, Qualifikation) VALUES ('%i', '%s', '%s', '%s', '%s');"""

    for a in assis:
        (firstname, lastname) = a['name'].split(' ', 1)
        print(sql % (a['id'], firstname, lastname, a['email'], a['qualification']))

def generate_fcs_sql(fcs):
    sql = """INSERT INTO "Finanzkategorie" (ID, Name, Jahr, Plankosten, Kostenstelle) VALUES ('%i', '%s', '%s', '%s', '%s');"""

    for f in fcs:
        print(sql % (f['id'], f['name'], f['year'], f['costs'], f['costunit']))

def generate_wages_sql(wages):
    sql = """INSERT INTO "Stundenlohn" (Qualifikation, Monat, Jahr, Lohn) VALUES ('%s', '%s', '%s', '%s');"""

    for w in wages:
        print(sql % (w['qualification'], w['month'], w['year'], w['wage']))

def generate_courses_sql(courses):
    global remark
    sql = """INSERT INTO "Veranstaltung" (ID, Bezeichnung, Semester, Dozent, Gruppenanzahl, Zielpublikum, HKS, Umfang, Teil, Gruppe, Bemerkung, Betreuer, Finanzkategorie_ID) VALUES ('%i', '%s', '%s', '%s', '%s', '%s', '%i', '%s', 'a', '', '%s', '%s', '%i');"""

    for c in courses:
        #TODO: Add 'Zielpublikum'
        #TODO: Add 'Gruppe'
        print(sql % (c['id'], c['name'], c['semester'], c['lecturer'], c['groups'], '', c['hks'], c['amount'], remark, c['tutor'], c['fc'] ))

def generate_activities_sql(act):
    global remark
    sql = """INSERT INTO "Vorgang" (ID, Hilfskraft_ID, Veranstaltung_ID, Art, Datum, Inhalt, Sender, Dokumententyp, Bearbeiter, Bemerkung) VALUE ('%i', %s, %s, '%s', '%s', '%s', '%s', '%s', '%s', '%s');"""

    for a in act:
        #TODO: Add content
        assi_id = "'" + str(a['assi']) + "'" if a['assi'] is not None else 'NULL'
        course_id = "'" + str(a['course']) + "'" if a['course'] is not None else 'NULL'
        print(sql % (a['id'], assi_id, course_id, a['type'], a['date'], '', a['sender'], a['doctype'], 'ab', remark))

def generate_employments_sql(emp):
    global remark
    sql = """INSERT INTO "Beschaeftigung" (ID, Hilfskraft_ID, Veranstaltung_ID, Vertrag_ID, Monat, Jahr, AnzahlStunden, Fonds, Bemerkung, Kostenstelle, Qualifikation) VALUES ('%i', '%i', '%i', '%i', '%i', '%i', '%i', '%s', '%s', '%s', '%s');"""

    for e in emp:
        generate_contract_sql(e['contract'])
        print(sql % (e['id'], e['assi'], e['course'], e['cid'], e['month'], e['year'], e['hours'], e['fonds'], remark, e['costunit'], e['qualification']))

def generate_contract_sql(contract):
    if contract is None:
        return

    sql = """INSERT INTO "Vertrag" (ID, Hilfskraft_ID, Art, DatumAnfang, DatumEnde, DatumAbschluss, DatumBestaetigung, Delegation) VALUES ('%i', '%i', '%s', '%s', '%s', '%s', '%s', '%i');"""
    print(sql % (contract['id'], contract['assi'], contract['type'], contract['start'], contract['end'], contract['completion'], contract['confirmation'], contract['delegation']))


if __name__ == '__main__':
    main()
