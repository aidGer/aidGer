<?xml version="1.0" encoding="UTF-8" ?>
<project basedir="." default="release" name="aidGer">

    <property environment="env" description="System environment variables (including those set by Hudson)" />
    <condition property="buildNumber" value="-${env.BUILD_NUMBER}" else="">
        <isset property="env.BUILD_NUMBER" />
    </condition>

    <property name="appName" value="aidGer" />
    <property name="appFileName" value="aidger" />
    <property name="appVersion" value="1.5-dev" />

    <property name="default.target.dir" value="build" />
    <property name="dist.dir" value="dist" />
    <property name="classes.dir" value="${default.target.dir}/classes" />
    <property name="test.classes.dir" value="${default.target.dir}/test-classes" />
    <property name="test.report.dir" value="${default.target.dir}/test-reports" />
    <property name="lib.dir" value="${basedir}/lib" />

    <property name="source.dir" value="src" />
    <property name="test.source.dir" value="tests" />
    <property name="test.pattern" value="**/**Test.java" />
    <property name="test.excludepattern" value="**/controller/test/**.java" />

    <property name="lib.siena" value="lib/siena-1.0.0-b6.jar" />
    <property name="lib.mysql" value="lib/mysql-connector-java-5.1.13-bin.jar" />
    <property name="lib.itext" value="lib/iText-5.0.4.jar" />
    <property name="lib.jcommon" value="lib/jcommon-1.0.16.jar" />
    <property name="lib.jfreechart" value="lib/jfreechart-1.0.13.jar" />
    <property name="lib.junit" value="lib/junit.jar" />
    <property name="lib.hamcrest" value="lib/hamcrest-core-1.3.jar" />
    <property name="lib.gettexttasks" value="lib/gettext-ant-tasks.jar" />
    <property name="lib.launch4j.linux" location="${lib.dir}/launch4j/launch4j-3.0.2-linux.tgz" />
    <property name="lib.launch4j.windows" location="${lib.dir}/launch4j/launch4j-3.0.2-win32.zip" />
    <property name="lib.launch4j.macosx" location="${lib.dir}/launch4j/launch4j-3.0.2-macosx.tgz" />

    <property name="config.dir" value="${user.home}/.config/aidGer" />
    <available property="isConfigDir" file="${config.dir}" />

    <!-- Detect the operating system -->

    <condition property="isWindows">
        <or>
	        <os name="Windows 2000" />
	        <os name="Windows XP" />
	        <os name="Windows 2003" />
	        <os name="Windows Vista" />
	        <os name="Windows 7" />
    	</or>
    </condition>

    <condition property="isLinux">
        <os name="Linux" />
    </condition>

    <condition property="isMacOSX">
        <os name="Mac OS X" />
    </condition>

    <condition property="isLaunch4jAvailable">
		<available file="${lib.dir}/launch4j/launch4j" />
	</condition>

    <!-- Internationalisation stuff -->

    <target name="init-gettext" description="Loads the gettext tasks">
        <taskdef name="gettext-extract" classname="org.xnap.commons.ant.gettext.GettextExtractKeysTask" classpath="${lib.gettexttasks}" />
        <taskdef name="gettext-merge" classname="org.xnap.commons.ant.gettext.GettextMergeKeysTask" classpath="${lib.gettexttasks}" />
        <taskdef name="gettext-dist" classname="org.xnap.commons.ant.gettext.GettextDistTask" classpath="${lib.gettexttasks}" />
    </target>

    <target name="lang-gen" description="Extracts and merges the language files" depends="init-gettext">
        <gettext-extract keysFile="aidger.pot" poDirectory="lang" keywords="-k_ --no-location --no-wrap">
            <fileset dir="${source.dir}" includes="**/*.java" />
        </gettext-extract>
        <gettext-merge keysFile="aidger.pot" poDirectory="lang" />
    </target>

    <target name="lang-install" description="Installs the language files" depends="init-gettext">
        <gettext-dist targetBundle="de.aidger.res.lang" outputFormat="properties" poDirectory="lang" outputDirectory="${source.dir}" />
    </target>

    <target name="lang-install-config" description="Copies language files to configuration directory" depends="lang-install" if="isConfigDir">
        <copy todir="${config.dir}/lang">
            <fileset dir="${source.dir}/de/aidger/res/lang" />
        </copy>
    </target>

    <!-- Initialise the build process -->

    <target name="init" depends="lang-install">
        <mkdir dir="${classes.dir}" />
        <mkdir dir="${test.classes.dir}" />

        <copy includeemptydirs="false" todir="${classes.dir}">
            <fileset dir="${source.dir}">
                <exclude name="**/*.java" />
            </fileset>
        </copy>

        <path id="build.classpath">
            <pathelement location="${lib.siena}" />
            <pathelement location="${lib.mysql}" />
            <pathelement location="${lib.itext}" />
            <pathelement location="${lib.jcommon}" />
            <pathelement location="${lib.jfreechart}" />
        </path>
        <path id="build.classpath.test">
            <pathelement location="${classes.dir}" />
            <path refid="build.classpath" />
            <pathelement location="${lib.junit}" />
            <pathelement location="${lib.hamcrest}" />
        </path>
    </target>

    <target name="clean">
        <delete dir="${default.target.dir}" />
        <delete dir="${dist.dir}" />
    </target>

    <!-- Compile the code -->

    <target name="compile-source" depends="init" description="Compiles all .java files in src">
        <javac destdir="${classes.dir}" srcdir="${source.dir}" classpathref="build.classpath" includeantruntime="false" debug="true" debuglevel="source,lines,vars" encoding="UTF-8" target="1.6" />
    </target>

    <target name="compile-tests" depends="compile-source" description="Compiles all JUnit tests">
        <javac destdir="${test.classes.dir}" srcdir="${test.source.dir}" classpathref="build.classpath.test" includeantruntime="false" debug="true" debuglevel="source,lines,vars" encoding="UTF-8" />
    </target>

    <!-- Run the tests -->
    
    <target name="prepare-tests" depends="init" description="Prepares the config and database for the JUnit tests">
        <mkdir dir="${test.report.dir}" />
    </target>

    <target name="finish-tests" description="Clean up after the tests have been run">
		<delete>
			<fileset dir="." includes="*.cfg" />
			<fileset dir="." includes="costUnitMap.xml" />
			<fileset dir="." includes="*.log" />
			<fileset dir="." includes="history" />
		</delete>
    </target>

    <target name="test" depends="compile-tests, prepare-tests" description="Runs JUnit tests">
        <junit dir="${basedir}" fork="true" haltonfailure="true">
            <sysproperty key="basedir" value="${basedir}" />
            <env key="AIDGER_TEST" value="true" />
            <formatter type="plain" usefile="false" />
            <formatter type="xml" />
            <classpath>
                <path refid="build.classpath.test" />
                <pathelement path="${test.classes.dir}" />
                <pathelement path="${classes.dir}" />
            </classpath>
            <batchtest todir="${test.report.dir}">
                <fileset dir="${test.source.dir}">
                    <include name="${test.pattern}" />
                    <exclude name="${test.excludepattern}" />
                </fileset>
            </batchtest>
        </junit>
        <antcall target="finish-tests" />
    </target>

    <!-- Create packages -->

    <target name="dist" depends="compile-source" description="Generates the distribution">
        <delete dir="${test.classes.dir}" />
        <delete dir="${dist.dir}" />
        <mkdir dir="${dist.dir}" />

        <jar jarfile="${dist.dir}/${appFileName}-${appVersion}${buildNumber}.jar" basedir="${classes.dir}" level="9">
            <zipfileset src="${lib.siena}" />
            <zipfileset src="${lib.mysql}" />
            <zipfileset src="${lib.itext}" />
            <zipfileset src="${lib.jcommon}" />
            <zipfileset src="${lib.jfreechart}" />
            <manifest>
                <attribute name="Main-Class" value="de.aidger.controller.Application" />
                <attribute name="Class-Path" value="." />
                <attribute name="Implementation-Title" value="${appName}" />
                <attribute name="Implementation-Version" value="${appVersion}-${buildNumber}" />
                <attribute name="Implementation-Vendor" value="Team aidGer" />
                <attribute name="SplashScreen-Image" value="de/aidger/res/icons/splashscreen.png" />
            </manifest>
        </jar>

        <zip destfile="${dist.dir}/${appFileName}-src-${appVersion}${buildNumber}.zip" level="9">
            <zipfileset dir="${basedir}">
                <include name="lib/*.jar" />
                <include name="src/**" />
                <include name="tests/**/*.java" />
                <include name="lang/**" />
                <include name="build.xml" />
                <include name="ChangeLog" />
                <include name="COPYING" />
                <include name="README" />

                <exclude name="lib/junit.jar" />
            </zipfileset>
        </zip>
    </target>

    <target name="jar" depends="dist" />
    
    <!-- Launch4J stuff -->
    <target name="prepare-launch4j-unix">
		<untar src="${lib.dir}/launch4j/l4j.tar" dest="${lib.dir}/launch4j" />

		<delete file="${lib.dir}/launch4j/l4j.tar" />

		<chmod perm="a+rwx">
			<fileset dir="${lib.dir}/launch4j/launch4j">
				<include name="**/*" />
			</fileset>
		</chmod>
	</target>
    
	<target name="prepare-launch4j-linux" if="isLinux">
		<gunzip src="${lib.launch4j.linux}" dest="${lib.dir}/launch4j/l4j.tar" />
		<antcall target="prepare-launch4j-unix" />
	</target>

	<target name="prepare-launch4j-macosx" if="isMacOSX">
		<gunzip src="${lib.launch4j.macosx}" dest="${lib.dir}/launch4j/l4j.tar" />
		<antcall target="prepare-launch4j-unix" />
	</target>

	<target name="prepare-launch4j-windows" if="isWindows">
		<unzip src="${lib.launch4j.windows}" dest="${lib.dir}/launch4j" />
	</target>

	<target name="prepare-launch4j">
		<!-- Remove old Launch4j library if there is one -->
		<delete dir="${lib.dir}/launch4j/launch4j" />

		<antcall target="prepare-launch4j-linux" />
		<antcall target="prepare-launch4j-windows" />
		<antcall target="prepare-launch4j-macosx" />
	</target>
	
	<target name="build-launch4j" depends="dist,prepare-launch4j" if="isLaunch4jAvailable" description="Generate runnable .exe file for MS Windows">
		<property name="dir.launch4j" location="${lib.dir}/launch4j/launch4j" />
		<property name="conf.launch4j" location="${lib.dir}/launch4j/launch4j-conf.xml" />

		<taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask" classpath="${dir.launch4j}/launch4j.jar:${dir.launch4j}/lib/xstream.jar" />

		<launch4j configFile="${conf.launch4j}" 
jar="${dist.dir}/${appFileName}-${appVersion}${buildNumber}.jar" outfile="${dist.dir}/${appFileName}_${appVersion}${buildNumber}.exe" />
	</target>

    <!-- Test aidGer and create all release files after that -->
    
    <target name="release" description="Generates a full release">
        <antcall target="test" />
        <antcall target="dist" />
    </target>
    
    <target name="release-win32" description="Generates a full release including a .exe file">
<!--        <antcall target="test" /> -->
        <antcall target="dist" />
        <antcall target="build-launch4j" />
    </target>

</project>
