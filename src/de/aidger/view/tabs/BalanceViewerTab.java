package de.aidger.view.tabs;

import static de.aidger.utils.Translation._;

import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JPanel;

import de.aidger.utils.reports.BalanceHelper;
import de.aidger.controller.ActionRegistry;
import de.aidger.controller.ActionNotFoundException;
import de.aidger.controller.actions.GenerateReportAction;

/**
 * A tab for viewing balance reports.
 * 
 * @author aidGer Team
 */
public class BalanceViewerTab extends Tab {

    private int typeOfBalance = 0;

    /**
     * Initializes a new BalanceViewerTab, which will have the created Semesters
     * added to it.
     */
    public BalanceViewerTab(int index) {
        initComponents();
        try {
            generateButton.setAction(ActionRegistry.getInstance().get(
                    GenerateReportAction.class.getName()));
        } catch (ActionNotFoundException ex) {
            Logger.getLogger(BalanceViewerTab.class.getName()).log(Level.SEVERE, null, ex);
        }

        typeOfBalance = index;
        switch (index) {
        case 1:
            yearLabel.setVisible(false);
            yearComboBox.setVisible(false);
            filterNameComboBox.addItem(_("Group"));
            filterNameComboBox.addItem(_("Lecturer"));
            filterNameComboBox.addItem(_("Target Audience"));
            existingFilterLabel.setVisible(false);
            existingFilterNameComboBox.setVisible(false);
            existingFilterComboBox.setVisible(false);
            break;
        case 2:
            Vector availableYears = new BalanceHelper().getYears();
            for (Object year : availableYears) {
                yearComboBox.addItem(year);
            }
            filterNameComboBox.addItem(_("Group"));
            filterNameComboBox.addItem(_("Lecturer"));
            filterNameComboBox.addItem(_("Target Audience"));
            existingFilterLabel.setVisible(false);
            existingFilterNameComboBox.setVisible(false);
            existingFilterComboBox.setVisible(false);
            break;
        case 3:
            Vector semesters = new BalanceHelper().getSemesters();
            for (Object semester : semesters) {
                yearComboBox.addItem(semester);
            }
            filterNameComboBox.addItem(_("Group"));
            filterNameComboBox.addItem(_("Lecturer"));
            filterNameComboBox.addItem(_("Target Audience"));
            existingFilterLabel.setVisible(false);
            existingFilterNameComboBox.setVisible(false);
            existingFilterComboBox.setVisible(false);
            break;
        }
    }

    /**
     * Get the type of balance.
     *
     * @return The type of balance
     */
    public int getType() {
        return typeOfBalance;
    }

    /**
     * Get the year currently selected-
     *
     * @return The year
     */
    public Object getYear() {
        return yearComboBox.getSelectedIndex() > 0 ?
                yearComboBox.getSelectedItem() : null;
    }

    /**
     * Add a new panel
     *
     * @param panel
     *              The panel to add
     */
    public void addPanel(JPanel panel) {
        contentPanel.add(panel);
        contentPanel.setVisible(false);
        contentPanel.setVisible(true);
    }

    /**
     * Clear the panel.
     */
    public void clearPanel() {
        contentPanel.removeAll();
    }

    /*
     * (non-Javadoc)
     * 
     * @see de.aidger.view.tabs.Tab#getTabName()
     */
    @Override
    public String getTabName() {
        return _("Balance Viewing");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField3 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        yearLabel = new javax.swing.JLabel();
        yearComboBox = new javax.swing.JComboBox();
        generateButton = new javax.swing.JButton();
        exportButton = new javax.swing.JButton();
        filtersLabel = new javax.swing.JLabel();
        filterNameComboBox = new javax.swing.JComboBox();
        filterComboBox = new javax.swing.JComboBox();
        addFilterButton = new javax.swing.JButton();
        existingFilterLabel = new javax.swing.JLabel();
        existingFilterNameComboBox = new javax.swing.JComboBox();
        existingFilterComboBox = new javax.swing.JComboBox();
        contentPanel = new javax.swing.JPanel();

        jTextField3.setText("jTextField3");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setLayout(new java.awt.BorderLayout());

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        yearLabel.setText(_("Year") + ":");
        jToolBar1.add(yearLabel);

        jToolBar1.add(yearComboBox);

        generateButton.setText(_("Generate"));
        generateButton.setFocusable(false);
        generateButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        generateButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(generateButton);

        exportButton.setText(_("Export"));
        exportButton.setFocusable(false);
        exportButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        exportButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(exportButton);

        filtersLabel.setText(_("Filters") + ":");
        jToolBar1.add(filtersLabel);

        jToolBar1.add(filterNameComboBox);

        jToolBar1.add(filterComboBox);

        addFilterButton.setText("+");
        addFilterButton.setFocusable(false);
        addFilterButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addFilterButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(addFilterButton);

        existingFilterLabel.setText(_("Existing filters") + ":");
        jToolBar1.add(existingFilterLabel);

        jToolBar1.add(existingFilterNameComboBox);

        jToolBar1.add(existingFilterComboBox);

        add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        contentPanel.setLayout(new java.awt.GridLayout(0, 1));
        add(contentPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFilterButton;
    private javax.swing.JPanel contentPanel;
    private javax.swing.JComboBox existingFilterComboBox;
    private javax.swing.JLabel existingFilterLabel;
    private javax.swing.JComboBox existingFilterNameComboBox;
    private javax.swing.JButton exportButton;
    private javax.swing.JComboBox filterComboBox;
    private javax.swing.JComboBox filterNameComboBox;
    private javax.swing.JLabel filtersLabel;
    private javax.swing.JButton generateButton;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JComboBox yearComboBox;
    private javax.swing.JLabel yearLabel;
    // End of variables declaration//GEN-END:variables

}
